val_repl <- c(8, 9) # Specify values to be replaced
santa_lucia_modif <- sapply(santa_lucia_modif, # Replace values in all columns
function(x) replace(x, x %in% val_repl, 0))
View(santa_lucia_modif)
#Carga de datos
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL.RData")
#Selecciono las columnas de interes
names(santa_lucia)
santa_lucia_modif <- santa_lucia[,c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")]
#Reemplazo los valores 8 y 9 por cero (corresponden a datos faltantes)
val_repl <- c(8, 9) # Specify values to be replaced
santa_lucia_modif <- sapply(santa_lucia_modif, # Replace values in all columns
function(x) replace(x, x %in% val_repl, 0))
,
santa_lucia_modif$NBI_total <- sum(santa_lucia[,c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
santa_lucia_modif$NBI_total <- sum(santa_lucia[c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
santa_lucia_modif$NBI_total <- sum(c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
santa_lucia_modif$NBI_total <- santa_lucia_modif$NBI_HAC + santa_lucia_modif$NBI_COC
?SUM
#Creo la variable NBI_total
santa_lucia_modif$NBI_total = rowSums(santa_lucia_modif[,c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
#Creo la variable NBI_total
santa_lucia_modif$NBI_total = rowSums(santa_lucia_modif[,c("NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
class(santa_lucia_modif)
#Carga de datos
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL.RData")
#Selecciono las columnas de interes
names(santa_lucia)
santa_lucia_modif <- santa_lucia[,c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")]
santa_lucia_modif <- as.data.frame(santa_lucia_modif)
#Reemplazo los valores 8 y 9 por cero (corresponden a datos faltantes)
val_repl <- c(8, 9) # Specify values to be replaced
santa_lucia_modif <- sapply(santa_lucia_modif, # Replace values in all columns
function(x) replace(x, x %in% val_repl, 0))
#Creo la variable NBI_total
santa_lucia_modif$NBI_total = rowSums(santa_lucia_modif[,c("NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
class(santa_lucia_modif)
as.data.frame(santa_lucia_modif)
#Creo la variable NBI_total
santa_lucia_modif$NBI_total <- rowSums(santa_lucia_modif[,c("NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
View(santa_lucia_modif)
View(santa_lucia)
#Carga de datos
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL.RData")
#Selecciono las columnas de interes
names(santa_lucia)
santa_lucia_modif <- santa_lucia[,c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")]
View(santa_lucia_modif)
#Reemplazo los valores 8 y 9 por cero (corresponden a datos faltantes)
val_repl <- c(8, 9) # Specify values to be replaced
santa_lucia_modif <- sapply(santa_lucia_modif, # Replace values in all columns
function(x) replace(x, x %in% val_repl, 0))
santa_lucia_modif <- as.data.frame(santa_lucia_modif)
View(santa_lucia_modif)
#Creo la variable NBI_total
santa_lucia_modif$NBI_total <- rowSums(santa_lucia_modif[,c("NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")])
View(santa_lucia)
#Carga de datos
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL.RData")
#Selecciono las columnas de interes
names(santa_lucia)
santa_lucia_modif <- santa_lucia[,c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")]
View(santa_lucia_modif)
#Carga de datos
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL.RData")
#Selecciono las columnas de interes
names(santa_lucia)
santa_lucia_modif <- santa_lucia[,c("ID_VIVIENDA", "NBI_MAT", "NBI_HAC", "NBI_COC", "NBI_VIV", "NBI_AGUA", "NBI_SANEA", "NBI_ELECT", "NBI_CALEF", "NBI_REFRIG", "NBI_CALENTADOR", "NBI_CONFORT", "NBI_EDUCACIÓN", "NBI_CANTIDAD")]
#Reemplazo los valores 8 y 9 por cero (corresponden a datos faltantes)
val_repl <- c(8, 9) # Specify values to be replaced
santa_lucia_modif <- sapply(santa_lucia_modif, # Replace values in all columns
function(x) replace(x, x %in% val_repl, 0))
santa_lucia_modif <- as.data.frame(santa_lucia_modif)
View(santa_lucia_modif)
View(santa_lucia)
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL.RData")
View(santa_lucia)
#Carga de datos
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL.RData")
View(santa_lucia)
#Carga de datos
load("C:/Users/Nacho/Desktop/Muestreo/Trabajo 1/SL_modif.RData")
data( 'iris' ) # crea un objeto llamado iris con datos
is.data.frame(iris) # verificar si iris es un data.frame
?iris
?CO2
?ToothGrowth
swirl()
library(swirl)
install_course_zip('Programando_en_R.zip')
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('Mi primera función!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(function(x), c(8, 4, 0)
evaluate(function{x}, c(8, 4, 0))
evaluate(function{x}(x[1]), c(8, 4, 0))
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("La","programación", "es", "divertida!")
submit()
telegram("Nacional", "noma!")
submit()
"Yo %p% amo %p% R"
"Yo" %p% "amo" %p% "R"
"Yo" %p% "amo" %p% "R!"
library(ggplot2)
library(ggplot2)
# Cargo los datos de cada caja
caja_A <- c(5.5, 4.5, 3.2, 8.5, 2.5,5, 6, 3, 4, 6.5, 4.8, 7.5)
caja_B <- c(4.7, 3.2, 6.2, 4.5, 3.9, 7.3, 2.8, 2.1, 4.7, 4.9, 2.1, 6.3)
# Creo una hoja de datos que unifique la infirmación
data <- data.frame(caja_A, caja_B)
# Calculo los cuantiles con la función quantile por defecto y con la opción probs
?quantile
quantile(data$caja_A)
quantile(data$caja_B, probs = c(0.25,0.5,0.75))
quantile(data$caja_A, probs = c(0.25,0.5,0.75))
quantile(data$caja_B, probs = c(0.25,0.5,0.75))
quantile(data$caja_A)
quantile(data$caja_B)
# Creo el gráfico de caja para ambas cajas por separado
boxplot(data$caja_A)
boxplot(data$caja_B)
# Creo el gráfico de caja para ambas cajas juntas especificando qué variable
boxplot(data$caja_A,data$caja_B)
# Creo el gráfico de caja para todas las variables de data
boxplot(data)
quantile(data$caja_A)
quantile(data$caja_B)
mean(caja_A)
mean(caja_B)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
datos <- data.frame(
Empresa = paste(rep(1:3, times=2), rep(c('G', 'P'),each=3), sep='_'),
consumo.2018 = rpois(6, 10),
consumo.2017 = rpois(6, 12),
consumo.2016 = rpois(6, 20)
)
datos
datos <- data.frame(
Empresa = paste(rep(1:3, times=2), rep(c('G', 'P'),each=3), sep='_'),
consumo.2018 = rpois(6, 10),
consumo.2017 = rpois(6, 12),
consumo.2016 = rpois(6, 20)
)
datos
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
knitr::opts_chunk$set(echo = FALSE)
install.packages("tidyverse")
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
devtools::install_github("tidyverse/tidyverse")
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.1.0.tar.gz", repo=NULL, type="source")
knitr::opts_chunk$set(echo = FALSE)
library("tidyverse")
remove.packages("rlang")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.1.0.tar.gz", repo=NULL, type="source")
library("tidyverse")
u <- c(0.25, 1.38, 2.72, 0.88, 0.94)
v <- c(0.80, 0.55, -0.59, 0.2, -1.55)
o1 <- mean(u) - sum(u)/length(u)
o2 <- sum(v - mean(v) )
o3 <- var(u) - sum( (u - 3)ˆ2 ) < 0
Un segundo código de R
x <- 10:1
y <- rep( c(1,2), times=c(7, 3) )
z <- sort(x)[y == 2]
o4 <- y[4]
o5 <- z[1]
o3 <- var(u) - sum( (u - 3)^2 ) < 0
vector <- c(9.3,
4.8,
2.2,
0.7,
0.6,
0.5,
0.4,
0.3,
0.3,
1.5,
0.4)
median(vector)
mean(vector)
sd(vector)
quantile(vector)
xm <- median(d$co2)
OBJ <- median( d$co2[ d$co2 >= xm ] )
OBJ
xm <- median(vector)
OBJ <- median( vector[ vector >= xm ] )
OBJ
vector-xm
abs(vector-xm)
median(abs(vector-xm))
sd(vector)
o2
o5
o3
#Media y mediana no coinciden
median(vector)
mean(vector)
#MEDA es mayor que el desvío tipico
MEDA <- median(abs(vector-xm))
desvio <- sd(vector)
MEDA > desvio
library(ggplot2)
#Carga de datos
df <- data.frame (
"Proporcion"=c(0.22, 0.24, 0.25, 0.28, 0.30, 0.33, 0.37, 0.40, 0.42, 0.42),
"Renta"=c(30,27, 22, 23, 19, 20, 15, 14, 11, 12)
)
# 1. Obtiene los valores ajustados para a y b.
R_var <- var(df$Renta)
y_R_cov <- cov(df$Proporcion, df$Renta)
b = (1/R_var) * y_R_cov
b
y_media <- mean(df$Proporcion)
R_media <- mean(df$Renta)
a = y_media - b*R_media
a
# 2. Verifica los valores de los coeficientes usando la función lm()
ggplot(df) +
geom_point(aes(y = Proporcion, x = Renta) ) +
geom_smooth(aes(y = Proporcion, x = Renta), method='lm', se=FALSE)
mod <- lm(Proporcion ~ Renta, data = df)
coefficients(mod)
# 3. Si un hogar tiene 16800 unidades monetarias de renta, que proporci?n de gasto se
# espera que tenga en alimentación?
#y_gorro = a + bR
#Es posible obtener un ygorro para cada valor de X
df$ygorro <- fitted(mod)
df
#Pero tambien es posible obtener un valor de ygorro para un valor de X que no forma parte de la muestra original
y_gorro = a + b * 16.8
y_gorro
# 4. Cómo interpretas el coeficiente b de la variable renta? Te parece razonable su signo?
# Diferencia esperada entre 2 hogares distintos que tienen una diferencia observadavde 1000 unidades en la renta
#Pero tambien es posible obtener un valor de ygorro para un valor de X que no forma parte de la muestra original
y_gorro = a + b * 16.8
y_gorro
#Pero tambien es posible obtener un valor de ygorro para un valor de X que no forma parte de la muestra original
y_gorro = a + b * 15.8
y_gorro
#Pero tambien es posible obtener un valor de ygorro para un valor de X que no forma parte de la muestra original
y_gorro = a + b * 16.8
y_gorro
0.36346 - 0.3519
#define dataset
data <- data.frame (x = c (1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11),
y = c (13, 14, 17, 12, 23, 24, 25, 25, 24, 28, 32, 33, 35, 40, 41))
diagrama de dispersión #create de x y y valores de
trama (datos $ x, $ y datos, PCH = 16)
plot(data$x, data$y)
#agregue la línea de regresión ajustada al diagrama de dispersión
abline (a = 0, b = 1, col = "steelblue")
#ajustar un modelo de regresión lineal a los datos
reg_model <- lm (y ~ x, data = data)
#definir los valores de intersección y pendiente
a <- coeficientes (reg_model) [1] #intercepción
#definir los valores de intersección y pendiente
a <- coefficients(reg_model) [1] #intercepción
b <- coefficients(reg_model) [2] #slope
#agregue la línea de regresión ajustada al diagrama de dispersión
abline (a = 0, b = 1, col = "steelblue")
#agregue la línea de regresión ajustada al diagrama de dispersión
abline (a = a, b = a, col = "steelblue")
#define dataset
data <- data.frame (x = c (1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11),
y = c (2, 1, 3, 2, 3, 6, 8, 7, 7, 6, 8, 8, 11, 10, 12))
plot(data$x, data$y)
#agregue la línea de regresión ajustada al diagrama de dispersión
abline (a = 0, b = 1, col = "steelblue")
#define dataset
?reorder
library(ggplot)
library(ggplot2)
Plantas = c(15,16,18,18,12,12,25,10,15,22,14,14,16,4,8,5,7,3,9,12) # Plantas nacidas por m2
Parcela = paste("P", 1:20)
Tratamiento = rep((c("Tratado","Testigo")),c(10,10))
df = data.frame(Tratamiento, Parcela, Plantas)
df
ggplot(data=df, aes(x=reorder(Parcela,Plantas), y=Plantas, fill=Tratamiento)) +
geom_bar(stat="identity", position="dodge")
library(ggplot2)
data("msleep")
?msleep
# 1
ggplot(msleep) +
geom_bar( aes( x = order))
order_f <- factor(msleep$order)
View(msleep)
levels(order_f)
niveles <- names(sort(table(msleep$order)))
order_f <- factor(msleep$order, levels = niveles)
levels(order_f)
library(ggplot2)
data("msleep")
?msleep
# 1
ggplot(msleep) +
geom_bar( aes( x = order))
order_f <- factor(msleep$order)
levels(order_f)
reorder(order_f,sleep_total, sum())
reorder(order_f,sleep_total, FUN='sum')
reorder(order_f, msleep$sleep_total, FUN='sum')
reorder(order_f, msleep$order, FUN='count')
?reorder
reorder(order_f, msleep$order, FUN='median')
reorder(order_f, msleep$sleep_total, FUN='count')
reorder(order_f, msleep$order, FUN='sum')
reorder(order_f, msleep$sleep_total, FUN='sum')
ggplot(msleep) +
geom_bar( aes( x = order))
library(titanic)
library(data.table)
library(dplyr)
library(forcats)
library(ggplot2)
library(ggthemes)
df <- data.table(titanic::titanic_train)
df[,Pclass := as.factor(Pclass)]
df %>%
group_by(Pclass) %>%
summarise(count = n()) %>%
ggplot(aes(x = reorder(Pclass,(-count)), y = count)) +
geom_bar(stat = 'identity') +
theme_clean()
library(titanic)
library(data.table)
library(dplyr)
library(forcats)
library(ggplot2)
library(ggthemes)
df <- data.table(titanic::titanic_train)
df[,Pclass := as.factor(Pclass)]
library(titanic)
library(data.table)
library(dplyr)
library(forcats)
library(ggplot2)
library(ggthemes)
df <- data.table(titanic::titanic_train)
df <- read_csv('C:/Users/Nacho/Dropbox/Descriptiva2023/datos/datosTitanic.csv')
library(read_csv)
library(tidyverse)
df <- read_csv('C:/Users/Nacho/Dropbox/Descriptiva2023/datos/datosTitanic.csv')
df[,Pclass := as.factor(Pclass)]
df$Pclass <- as.factor(df$Pclass)
df %>%
group_by(Pclass) %>%
summarise(count = n()) %>%
ggplot(aes(x = reorder(Pclass,(-count)), y = count)) +
geom_bar(stat = 'identity') +
theme_clean()
df %>%
group_by(Pclass) %>%
summarise(count = n()) %>%
ggplot(aes(x = reorder(Pclass,(count)), y = count)) +
geom_bar(stat = 'identity') +
theme_clean()
# Define the variable ranges: maximum and minimum
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
# Bind the variable ranges to the data
df <- rbind(max_min, exam_scores)
df
View(max_min)
install.packages("fmsb")
# Demo data
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
exam_scores
# Define the variable ranges: maximum and minimum
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
# Bind the variable ranges to the data
df <- rbind(max_min, exam_scores)
df
student1_data <- df[c("Max", "Min", "Student.1"), ]
radarchart(student1_data)
library(fmsb)
student1_data <- df[c("Max", "Min", "Student.1"), ]
radarchart(student1_data)
radarchart(student1_data, axistype = 1)
radarchart(student1_data, axistype = 0)
radarchart(student1_data, axistype = 2)
radarchart(student1_data, axistype = 3)
radarchart(student1_data, axistype = 4)
radarchart(student1_data, axistype = 5)
?radarchart
install.packages("stringr")
install_version(rlang,
version = "1.0.6")
install.packages("install_version")
install_version(rlang,
version = "1.0.6")
library(install_version)
library("install_version")
library(swirl)
install_course_zip('EstDesc_SWIRL_course.zip')
swirl()
library(swirl)
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
install_course_zip('EstDesc_SWIRL_course.zip')
install_course_zip('My_New_Course.zip')
swirl()
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
install_course_zip('My_New_Course.zip')
swirl()
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
install_course_zip('My_New_Course.zip')
swirl()
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
install_course_zip('My_New_Course.zip')
swirl()
?swirl
uninstall_course()
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
install_course_zip('My_New_Course.zip')
swirl()
uninstall_course("Programando en R")
uninstall_course("EstDesc SWIRL course")
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
#uninstall_course("EstDesc SWIRL course")
install_course_zip('My_New_Course.zip')
swirl()
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
#uninstall_course("EstDesc SWIRL course")
install_course_zip('My_New_Course.zip')
swirl()
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
#uninstall_course("EstDesc SWIRL course")
install_course_zip('My_New_Course.zip')
swirl()
100+1
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
1
setwd("C:/Users/Nacho/Documents/GitHub/EstDesc_SWIRL_course")
library(swirl)
#uninstall_course("EstDesc SWIRL course")
install_course_zip('My_New_Course.zip')
swirl()
1+100
